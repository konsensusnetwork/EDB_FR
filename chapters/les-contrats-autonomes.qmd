# Autonomous Contracts {#ch:contracts}

A self-executing contract, known in English as a *smart contract*, is a computer program that operates without the need for a trusted third party. These contracts are also referred to as self-executable contracts or, literally translated, intelligent contracts. Each contract consists of clauses that specify particular spending conditions.

Bitcoin represents the first practical implementation of a system hosting autonomous contracts through its internal programming mechanism that employs scripts within transactions. This enables the execution of a variety of contracts, ranging from multisignature accounts to payment channels and escrow arrangements. The openness provided by this capability facilitates the inscription of arbitrary data on the chain, a strictly non-monetary use case of the protocol.

## Simple Contracts {#simple-contracts .unnumbered}

The concept of autonomous contracts[^515] emerged within the cypherpunk movement in the 1990s. It was introduced by Nick Szabo in 1994, who defined it as follows:

"A smart contract is a computerized transaction protocol that executes the terms of a contract. The general objectives of designing smart contracts are to satisfy common contractual conditions (such as payment terms, liens, confidentiality, and even enforcement), minimize exceptions both malicious and accidental, and minimize the need for trusted intermediaries[^516]."

The simplest form of an autonomous contract is value transfer, containing only one clause: the provision of a digital signature corresponding to a given public key. However, a multitude of other contracts can be implemented on Bitcoin, making it impossible to provide an exhaustive list. Here, we will describe a few examples to explain how they can be implemented. Let's first examine specific cases such as the multisignature account, escrow arrangements, crowdfunding, and atomic swaps.

### The Multisignature Account

A multisignature account is a shared account between multiple entities. It is based on the multipartite signature scheme described in Chapter [12](#ch:mechanics){reference-type="ref" reference="ch:mechanics"}, where spending funds requires M signatures out of N participants (known as "M-of-N"). For example, spending from a 2-of-3 account requires that 2 out of 3 predetermined participants provide a valid signature, regardless of which individuals they are.

This type of contract is useful for joint accounts between spouses (2-of-2), facilitating corporate holdings (e.g., 3 partners out of 7), or improving the general security of bitcoin storage. Exchanges notably use this type of contract to manage their assets. As of November 2023, the world's second-richest address was Bitfinex's 3-of-5 multisignature address, holding over 178,000 BTC[^517].

### Escrow Arrangements

An escrow, known in English as *escrow*, is a method that involves a trusted third party, such as a notary, to secure a transaction between two parties who are wary of each other. Utilizing Bitcoin's programmability can reduce the third party's power by including a limitation in the clause concerning them. This type of contract relies on two basic technical components: multisignature schemes and timelocks.

Consider the example of two individuals who do not know each other, Alice and Bob, wanting to conduct an online transaction: Alice is the buyer, and Bob is the seller. They both engage a trusted intermediary, Lenny, to create the escrow contract. Alice sends funds to it and waits to receive the goods. Two clauses can then be activated:

- **Amicable settlement**: The contract is unlocked by the signatures of both parties, who can choose to send the funds to Bob (successful exchange) or refund Alice (failed exchange).

- **Dispute resolution**: After a predetermined period (e.g., 30 days), the contract can be unlocked by Lenny's signature and that of one of the two parties; in this case, Lenny determines who is the honest party and sends the funds accordingly.

![Escrow contract.](img/escrow-contract.png){#fig:escrow-contract}

As depicted in Figure [13.1](#fig:escrow-contract){reference-type="ref" reference="fig:escrow-contract"}, this mechanism encourages both parties to cooperate to avoid delays and prevents the third party (Lenny) from colluding with either party before the stipulated period (30 days here). Thus, reliance on trust is minimized as much as possible.

This type of contract was endorsed by Satoshi Nakamoto in the white paper[^518]. Indeed, the irreversibility of transfers in Bitcoin offered little guarantee for merchants, and escrow arrangements helped mitigate the problem. This mechanism is typically involved today in peer-to-peer exchange platforms like Bisq or Hodl Hodl, even if the implementation differs from what's presented here.

### Crowdfunding

Crowdfunding involves reaching out to the general public to contribute to the support of a project, as opposed to financing through bank loans or raising funds from professional venture capitalists. It is most often an informal agreement between the project's promoter and the public, aimed at supporting the creation of a common good that benefits everyone. In Bitcoin, this agreement can be executed through revocable payment promises that are not subject to the arbitrariness of a trusted third party.

Technically, this involves creating a transaction called "anyone-can-pay," where each contributor's signature covers only the funding output and their own input, allowing additional inputs to be added (see Figure [13.2](#fig:sighash-anyonecanpay){reference-type="ref" reference="fig:sighash-anyonecanpay"}). The resulting transaction is valid only if the total inputs reach the specified output amount, so contributors retain control of their funds until the total payment is made and can withdraw at any time.

![Crowdfunding transaction.](img/sighash-anyonecanpay.png){#fig:sighash-anyonecanpay}

In the world of open-source software, this type of crowdfunding is particularly important because there's no privilege associated with writing code that allows one to make a living by selling licenses. This is even more true in the world of cryptocurrency, which heavily depends on the proper maintenance of software implementations. This is why Mike Hearn, who was closely interested in Bitcoin's programming capabilities, quickly adopted this possibility to deploy such "assurance contracts" allowing for community funding of ecosystem projects. He implemented the concept in his Lighthouse application, a functional version of which was released in 2015, aiming to facilitate community support for projects. With the onset of the block size war, this project was set aside by Hearn and eventually abandoned. However, the method was later adopted on Bitcoin Cash in 2020 via Flipstarter, which helped raise significant sums to fund the protocol's software infrastructure.

### Atomic Swaps

An atomic swap is a secure way to exchange two cryptocurrencies operating on different blockchains without using a trusted intermediary. The term "atomic" refers to the indivisible nature (from the ancient Greek [ἄτομος]{lang="el"}, *átomos*) of the exchange: either both parties transfer their due amounts, or nothing happens. The concept was described by Sergio Lerner and Gregory Maxwell in July 2012 on the Bitcointalk forum[^519].

The atomic swap relies on the concept of a hash time-locked contract (HTLC), which is a contract with two clauses, meaning the funds can be unlocked under two conditions[^520]:

- **Mutual agreement**: The revelation of a secret that is hashed by a function and compared to the hash embedded in the contract.

- **Dispute resolution**: Waiting for a certain predetermined lock time specified in the contract.

Consider an example of an atomic swap between Alice, who has BTC, and Bob, who has LTC. Alice (*maker*) proposes to exchange 0.03 BTC for 10 LTC, at an exchange rate of 0.003 LTC per BTC, and Bob (*taker*) accepts the deal. This negotiation can occur via a public or private order book. Alice randomly chooses a secret (denoted $s$), a 32-byte number, whose cryptographic hash $H(s)$ she provides to Bob. They can thus each build a contract on their side to perform the atomic swap. The process is described in Figure [13.3](#fig:atomic-swap-contract){reference-type="ref" reference="fig:atomic-swap-contract"}.

The first phase is the commitment phase. First, Alice constructs, signs, and broadcasts a commitment transaction sending 0.03 BTC to the atomic swap contract on the Bitcoin chain. She provides its content and address to Bob for verification. Then, she constructs and signs a refund transaction spending the funds from this contract, which she can broadcast after a predefined delay (here, 16 hours). Once Alice's commitment transaction is confirmed, Bob does the same on his side: he creates an equivalent contract on the Litecoin chain, where he sends 10 LTC, and gives its content and address to Alice for her to ensure everything is in order. Finally, he constructs and signs a transaction that will refund him after a delay strictly less than Alice's transaction (here, 8 hours). This difference results from the unbalanced relationship between Alice (who knows the unlocking secret) and Bob (who does not).

Once the commitment transactions are confirmed on their respective chains, the second phase of the atomic swap—the collection phase—can begin. Alice constructs, signs, and broadcasts a transaction that allows her to retrieve Bob's 10 LTC. To do this, she provides the secret within the transaction, thereby revealing it to Bob. Finally, Bob can also construct, sign, and broadcast a transaction that grants him the 0.03 BTC to his account. In this way, the exchange is completed!

![Contracts and transactions in an atomic swap.](img/atomic-swap-contract.png){#fig:atomic-swap-contract}

This model ensures that neither participant can refund themselves before the end of Bob's lock time (8 hours); that Alice cannot assert her refund transaction at the time of broadcasting her collection transaction; and that Bob cannot appropriate Alice's funds until she has broadcast her transaction. These guarantees make the process logically secure, even if disruptive events can occur, such as increased confirmation times due to fee market volatility.

The first real atomic swap was conducted between Litecoin and Decred on September 19, 2017, by Charlie Lee and Alex Yocom-Piatt[^521]. Today, atomic swaps are rare, and the order books of specialized platforms like AtomicDEX are sparsely populated. However, with the tightening regulations affecting the ecosystem and making centralized platforms less reliable, it's possible they will play a major role in the future.

## Payment Channels {#payment-channels .unnumbered}

A particular application of autonomous contracts in Bitcoin is the deployment of payment channels. A payment channel allows two users to make repeated bitcoin payments securely and instantly without publishing transactions on the blockchain, using previously locked funds. These channels are fundamental to the Lightning Network, built as a layer on top of the chain.

### Poon-Dryja Payment Channels

Although the idea of a payment channel was envisioned from the early days, it only materialized with the concept developed by Joseph Poon and Thaddeus Dryja in their Lightning Network project[^522]. This concept involves a bidirectional channel whose security relies on a penalty mechanism. Both participants lock funds in a 2-of-2 multisignature contract and can make payments to each other within the available liquidity. The sum of both participants' balances is referred to as the channel capacity.

A channel goes through three phases during its existence:

- **Opening or setup phase**: Funds are locked by the participants into an autonomous 2-of-2 multisignature contract.

- **Negotiation or update phase**: The distribution of funds within the channel is adjusted.

- **Closing or settlement phase**: Funds are distributed to the participants on-chain, usually cooperatively according to the latest state of the channel.

The initial distribution and channel updates are carried out through commitment transactions exchanged between the participants and *not broadcasted* to the network unless a dispute occurs, such as a non-cooperative closure. These commitment transactions are asymmetric, meaning each participant has their own version.

Suppose Alice and Bob have a channel, as illustrated in Figure [13.4](#fig:poon-dryja-contracts){reference-type="ref" reference="fig:poon-dryja-contracts"}. In this case, Alice's latest commitment transaction, which can only be finalized and broadcasted by Bob, accounts for the updated state of the channel and distributes the funds between Alice's address and a claim contract. This claim contract contains two clauses:

- **Recovery by Bob**: After a locktime, Bob can recover the funds, distributing them according to the balances indicated in the channel.

- **Recovery by Alice**: Using a revocation key that is revealed later when the channel is updated again, Alice can recover the funds.

If a payment occurs from Alice to Bob, the channel update proceeds as follows. Alice constructs and signs her commitment transaction using Bob's revocation public key, which he previously provided to her. Only Bob can finalize and broadcast this transaction. Bob responds by sending her his revocation private key, rendering Alice's previous commitment transaction ineffective. The same process occurs symmetrically: Bob constructs and signs his commitment transaction, sends it to Alice, and she reveals her revocation private key in exchange, making Bob's prior commitment transaction powerless[^523].

Revealing the revocation key at each update stage enables a penalty mechanism at any time. If one of the parties broadcasts a commitment transaction corresponding to a previous state of the channel, the other can recover *all* the funds in the channel. For example, Alice could recover Bob's funds if he were to broadcast a previous channel state intending to "undo" the last payment.

![Contracts and transactions in a Poon-Dryja payment channel: case of Bob paying 2 mBTC to Alice.](img/lightning-poon-dryja-channel-contracts.png){#fig:poon-dryja-contracts}

The main drawback of this penalty mechanism is that continuous network monitoring is required to prevent theft, necessitating a full node or a well-chosen trusted third party (a "watchtower").

This functioning of Poon-Dryja channels also means that any error is heavily penalized: accidentally broadcasting a prior commitment transaction leads to the other party recovering the funds. It has other drawbacks as well: it requires storing all previous channel states, forces participants to choose transaction fees in advance, and significantly complicates innovations within the Lightning Network. To improve this situation, the "Decker-Russell-Osuntokun" payment channels were conceptualized.

### Decker-Russell-Osuntokun Payment Channels

The Decker-Russell-Osuntokun payment channels were described by Christian Decker, Rusty Russell, and Olaoluwa Osuntokun in a white paper published in April 2018[^524]. The underlying protocol is called Eltoo, a play on "L2" (signifying *layer two*).

The functioning of Decker-Russell-Osuntokun channels is based on a chain of transactions that are not intended to be broadcast on-chain, except for the opening and closing transactions (see Figure [13.5](#fig:eltoo){reference-type="ref" reference="fig:eltoo"}). The principle is as follows:

- **Channel opening**: An opening transaction ($T_{u,0}$), previously backed by a settlement transaction ($T_{s,0}$) that reimburses the participants in case of a dispute.

- **Channel update**: Update transactions ($T_{u,i}$) that invalidate previous settlement transactions ($T_{s,i-1}$).

- **Channel closing**: The channel can be closed after a certain expiration delay by broadcasting the latest settlement transaction ($T_{s,i}$).

In this model, there's no need to use revocation keys to render previous channel states unusable; the transactions themselves serve this role. Eltoo involves what's called floating transactions, which can spend funds from any previous update transaction. This means each update transaction is floating, as is each settlement transaction, allowing omission of all previous updates. Additionally, a state number is included in each transaction to order them and prevent the broadcasting of an earlier state.

![Overview of the Eltoo protocol.](img/eltoo-offchain-protocol.png){#fig:eltoo}

An additional transaction is added to the chain to prevent the expiration delay of settlement transactions $T_{s,i}$ from being reached and them being broadcast on-chain. This transaction simply sends the funds to a regular multisignature account and is signed and broadcast after the signing of the initial update and settlement transactions ($T_{u,0}$ and $T_{s,0}$). The expiration delay only begins when transaction $T_{u,0}$ is broadcast.

This mechanism allows for a simple protocol for updating the channel, less constraining for nodes, without a penalty mechanism, and without needing to decide fees in advance. This ease of implementation could facilitate the creation of more complex contracts on Lightning, such as payment channels with three or more participants. Moreover, their implementation does not need to replace that of Poon-Dryja channels; both models can coexist within a single network of payment channels.

Floating transactions are implemented using SIGHASH_ANYPREVOUT. Thus, the realization of Eltoo relies on the integration of BIP-118 into Bitcoin.

## Inscription of Arbitrary Data {#inscription-of-arbitrary-data .unnumbered}

Bitcoin allows the inscription of non-financial data on the chain—that is, data not necessary for locking and unlocking funds and interpreted outside the protocol. Even with all possible restrictions, it's impossible to prevent the inscription of such data, although it can be made more costly.

The main chain of Bitcoin is widely shared around the world and will be preserved by humanity, at least as a historical relic, suggesting that what is stored there will be kept for a very long time. This characteristic encourages people to include things that matter to them. It's human nature to seek to leave traces of our passage on Earth, and writing on a supposedly immutable ledger is one way to do it.

Various methods of inscription exist, each with its own qualities and drawbacks. These have evolved over the years as this usage became more prevalent.

On one hand, arbitrary data can be written by miners within the coinbase transaction input, specifically in the unlocking script. This field is conceptually superfluous—the coinbase doesn't refer to any existing output—and can thus be used at discretion. This is the method Satoshi Nakamoto used to inscribe the now-famous headline from the January 3, 2009, issue of *The Times* in the genesis block:

*"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks"*

Other blocks contain notable messages. The exodus block of BCH (height 478,559) included a welcome message for Shuya Yang, the daughter of the CEO of the ViaBTC mining pool. The block preceding the third halving on BTC in 2020 (height 629,999) included the headline from a *New York Times* article dated April 9 announcing the Federal Reserve's record liquidity injection of \$2.3 trillion in response to the COVID-19 crisis: "*NYTimes 09/Apr/2020 With \$2.3T Injection, Fed's Plan Far Exceeds 2008 Rescue*."

The coinbase unlocking script can be used to write other data as well. This includes the extra nonce (the criterion that helped identify Satoshi's bitcoins). It's also how mining pools signal themselves through this field; for example, the coinbase of block 751,005 contains the string *poolin.com*, indicating that it was likely validated by the Chinese pool Poolin.

On the other hand, users can include arbitrary data within their transactions and pay the corresponding fees. Several methods have been used for this.

Before 2014, these inscriptions were most often made by storing data in locking scripts, for example, using the `OP_DROP` stack instruction[^525]. Another common practice was inscribing data in P2PKH-type outputs, which were then rendered unspendable. This method was extremely costly due to the transaction structure (requiring inscription in the outputs) and the need to send non-zero amounts in outputs. It was also detrimental to the system as a whole because it bloated the entire UTXO set.

After 2014, a more efficient way to store data was authorized through the standardization of the NULLDATA scheme based on the `OP_RETURN` instruction. This change allowed for the creation of "provably prunable outputs, to avoid data storage schemes [...] that were storing arbitrary data, such as images, as forever unspendable transaction outputs, thereby bloating Bitcoin's UTXO database[^526]." It also limited the wastage of funds by allowing the creation of a 0-satoshi output. This scheme quickly became the most popular way to publish information on the chain.

Furthermore, it's possible to store data within transaction inputs or associated witnesses when spending P2SH, P2WSH, or P2TR outputs. This writing can occur in the redeem scripts or in the unlocking elements. This method has the advantage of not overloading the entire UTXO set. For users, for inputs where SegWit applies, it has the benefit of reducing the cost of arbitrary data inscribed in the transaction by four.

These different methods have been used to inscribe various items on the chain, including cryptographic hashes, text, and images[^527].

First, one can inscribe a hash, with the inscription serving as a timestamp. This involves inscribing the hash of a file on the chain as proof of existence. This idea was put forward in February 2009 by Hal Finney in an email to the Bitcoin mailing list. He suggested that "the Bitcoin block chain would be perfect" to "prove that a certain document existed at a certain time in the past[^528]," a view approved by Satoshi. In essence, this practice allows one to demonstrate knowledge of information before its publication and thus indirectly claim probable authorship. This type of use has notably been implemented by the French company Woleet.

This possibility can also be exploited by decentralized file hosting systems like IPFS (InterPlanetary File System), which uses file hashes to identify them and allows their storage by a peer-to-peer network of users. It's thus possible to associate text written on the blockchain with images or videos hosted in a decentralized manner.

Next, one can inscribe text, usually encoded in ASCII/UTF-8. For example, the phrase "Beauty will save the world." was inscribed on the BTC chain on August 10, 2022, in transaction 08e5ce0783ab6d5534e234136df02e0e240f76108eb6af04b8b624646b66f5eb. Inscribing texts also allows for drawing images in ASCII art. This is the case with the tribute to Len Sassaman (see Figure [13.6](#fig:sassaman-tribute){reference-type="ref" reference="fig:sassaman-tribute"}), who passed away in July 2011. It was inscribed on the chain by developers Dan Kaminsky and Travis Goodspeed in P2PKH outputs and notably contains a representation of former Fed Chairman Ben Bernanke.

<figure id="fig:sassaman-tribute">
<pre data-fontsize="\footnotesize"><code>---BEGIN TRIBUTE---  =-=-=-=-=-=-=-=-=-=     ASCII BERNANKE
            #./BitLen            LEN "rabbi" SASSAMA  :'::.:::::.:::.::.:
            :::::::::::::::::::       1980-2011       : :.: ' ' ' ' : :':
            :::::::.::.::.:.:::  Len was our friend.  :.:     _.__    '.:
            :.: :.' ' ' ' ' : :  A brilliant mind,    :   _,^"   "^x,   :
            :.:'' ,,xiW,"4x, ''  a kind soul, and     '  x7'        `4,
            :  ,dWWWXXXXi,4WX,   a devious schemer;    XX7            4XX
            ' dWWWXXX7"     `X,  husband to Meredith   XX              XX
             lWWWXX7   __   _ X  brother to Calvin,    Xl ,xxx,   ,xxx,XX
            :WWWXX7 ,xXX7' "^X  son to Jim and       ( ' _,+o, | ,o+,"
            lWWWX7, _.+,, _.+.,  Dana Hartshorn,       4   "-^' X "^-'" 7
            :WWW7,. `^"-" ,^-;   coauthor and          l,     ( ))     ,X
             WW",X:        X,    cofounder and         :Xx,_ ,xXXXxx,_,XX
             "7^^Xl.    _(_x7'   Shmoo and so much      4XXiX'-___-'XXXX'
             l ( :X:       __ _  more.  We dedicate      4XXi,_   _iXX7'
             `. " XX  ,xxWWWWX7  this silly hack to     , `4XXXXXXXXX^ _,
              )X- "" 4X" .___.   Len, who would have    Xx,  ""^^^XX7,xX
            ,W X     :Xi  _,,_   found it absolutely  W,"4WWx,_ _,XxWWX7'
            WW X      4XiyXWWXd  hilarious.           Xwi, "4WW7""4WW7',W
            "" ,,      4XWWWWXX  --Dan Kaminsky,      TXXWw, ^7 Xk 47 ,WH
            , R7X,       "^447^  Travis Goodspeed     :TXXXWw,_ "), ,wWT:
            R, "4RXk,      _, ,  P.S.  My apologies,  ::TTXXWWW lXl WWT:
            TWk  "4RXXi,   X',x  BitCoin people.  He  ----END TRIBUTE----
            lTWk,  "^"     `4   LOL'd at BitCoin's
            :lWWWk,  ^""     ''  new dependency upon</code></pre>
<figcaption>Tribute to Len Sassaman (ASCII art).</figcaption>
</figure>

Finally, one can include an image, which can be encoded in multiple formats, notably JPEG or PNG. For example, a Bitcoin logo inscribed on May 13, 2011, can be found. A tribute to Nelson Mandela along with a photo was published on December 7, 2013, a few days after his death. In 2022, the lack of standard restrictions on Taproot script size allowed for voluminous inscriptions in a much more transparent and direct way. This notably enabled the inscription of the Taproot Wizards image, which was nearly 4 MB in size (see Figure [13.7](#fig:taproot-wizards){reference-type="ref" reference="fig:taproot-wizards"}).

![Image (reduced) of the Taproot Wizards.](img/taproot-wizards-small-0301e0480b374b32851a9462db29dc19fe830a7f7d7a88b81612b9d42099c0aei0.jpg){#fig:taproot-wizards}

In general, any file format can be stored on the chain through multiple transactions: a document, a book, a video, a game, etc. However, this use is not always appropriate. Inscription requires paying fees, sometimes high, and the BTC blockchain isn't really designed to store large amounts of data. Publishing these files on IPFS or on a local server is generally more suitable.

Note that the Bitcoin SV community focused on data storage, considering its ledger as a "universal source of truth[^529]." Consequently, a significant volume of weather data, inscribed since 2019, can be found on its chain. This has made the BSV network extremely centralized in terms of both mining and commerce, which questions the primary utility of recording information on a blockchain: immutability.

## Metaprotocols {#metaprotocols .unnumbered}

Metaprotocols are protocols that leverage the base protocol to function. They utilize the inscription of arbitrary data on the chain to include instructions interpreted by specific software implementations. They are characterized by being more extensive than the base protocol.

This is not a novel idea. From Bitcoin's early years, some individuals sought to exploit it more deeply, using it in ways beyond a simple value transfer instrument. This initial movement, aiming to add functionalities to Bitcoin in this manner, was termed "Bitcoin 2.0." It eventually led to the development of Ethereum starting in 2013.

The first type of metaprotocol developed was the concept of *colored coins*, which involves marking coins (UTXOs) by the additional inscription of data, as illustrated in Figure [13.8](#fig:colored-coin){reference-type="ref" reference="fig:colored-coin"}. Each type of token created is linked to an identifier, which can be likened to a color, hence the name of this approach. The idea was presented in 2012 by Yoni Assia and Meni Rosenfeld[^530].

![Creation and transfer of a token issued as a colored coin.](img/colored-coin.png){#fig:colored-coin}

The implementation of this concept was carried out at the end of 2012 through the ChromaWallet. However, it only gained momentum from 2014, with the emergence of Coinprism's Open Assets, Coin Sciences' CoinSpark assets, and Colu's Colored Coins. These uses have since fallen into disuse, although the procedure has been employed sporadically over the years, such as with Bisq's BSQ token created in 2018 as the basis of its DAO. An attempt at revival was also made on Bitcoin Cash with SLP tokens, without significant success.

Beyond colored coins, more advanced protocols existed that managed their own unit of account. These were primarily Mastercoin, later renamed Omni in March 2015, and Counterparty.

The first advanced metaprotocol was Mastercoin, whose white paper, titled "*The Second Bitcoin Whitepaper*", was published on January 6, 2012, by J.R. Willett[^531]. It was a protocol allowing users to create their own currencies, called "user currencies." Mastercoin was based on a unit of account noted as MSC, which was the subject of a one-month presale in July-August 2013[^532]. It was the first Initial Coin Offering (ICO) in history, raising 5,120 BTC, over \$500,000 at that time.

Perhaps the greatest success of this protocol was the creation of the first stablecoin, Tether USD, initially issued under the name Realcoin in October 2014. Mastercoin/Omni was long the only way to own and transfer USDT before the token was massively issued on other chains like Ethereum and Tron.

The second advanced metaprotocol was Counterparty, launched in January 2014. This platform also relied on a native token, XCP, which served as its fuel and was created by burning bitcoins during its first month of existence[^533]. Approximately 2,140 bitcoins were made unusable to give life to over 2.6 million XCP, still in circulation today. Counterparty aimed to be more flexible than Mastercoin by enabling the implementation of autonomous contracts, particularly to create tokens and host decentralized exchange platforms called "dispensers."

In particular, Counterparty was the first platform to offer the management of non-fungible tokens (NFTs). This implemented an old idea, notably highlighted by Hal Finney in 1993 on the cypherpunk mailing list as "cryptographic trading cards[^534]." Counterparty hosted numerous such collections, like the *Spells of Genesis* and SaruTobi playing cards created in 2015, or the Rare Pepes issued between 2016 and 2018.

In 2018, the emergence of Bitcoin Cash motivated the creation of a social media platform whose data would be entirely stored on-chain, as BCH developers were more liberal in this regard. The protocol was called Memo and involved publishing short messages publicly visible under a defined profile, following other users, and liking and replying to their messages. The idea was to achieve a sort of censorship-resistant social network but suffered from the need to pay fees for each action.

All these protocols lost their appeal until the emergence of the Ordinals protocol, launched in January 2023. This metaprotocol allowed the creation and management of "digital artifacts," i.e., NFTs whose full data is immutably stored on a censorship-resistant chain. Ordinals relied on an "ordinal theory" allowing for the tracking and transfer of satoshis linked to an inscription, such as text, images, or other data. In particular, Ordinals was used to emulate the ownership and transfer of fungible tokens, dubbed "BRC-20," whose speculative success caused network congestion leading to historically high transaction fees. The success of Ordinals also inspired the creation of the STAMPS protocol, based on Counterparty for artifact tracking and storing their data in P2MS outputs.

All these practices sparked debates. Bitcoin was presented as a model of digital currency, and it seemed counterproductive to turn it into a data preservation protocol unrelated to bitcoin transfers. As early as December 2010, Jeff Garzik opposed using the chain for generalized storage[^535]. Later, in 2014, similar disputes arose concerning Counterparty[^536]. In 2023, the same discord occurred following the success of Ordinals[^537].

These metaprotocols have two major flaws. The first is that verifying their rules depends on a small subset of network nodes. Indeed, managing such an overlay protocol requires additional resources, particularly for indexing in the case of colored coins. Consequently, few people deploy a complete implementation, significantly centralizing the protocol and making it susceptible to alteration by an adversary aiming to censor it.

The second flaw concerns their sometimes very high usage fees, especially if the network's transactional capacity limit is reached. Transactions implementing these solutions are necessarily larger than normal transactions, leading to higher fees. They are therefore more easily excluded by the fee increases resulting from network congestion.

For these reasons, those who worked on these solutions quickly moved away from them, preferring to turn to alternative platforms like NXT and especially Ethereum. Vitalik Buterin himself was interested in colored coins and Mastercoin in 2013 before starting to build what would become Ethereum[^538]. It's also for these reasons that less costly solutions—overlays using the chain as a settlement mechanism rather than as a place to record all operations—are now favored for such purposes, like RGB or Taproot Assets.

## Off-Chain Contracts {#off-chain-contracts .unnumbered}

Cryptography allows for the deployment of contracts without them having to be inscribed on-chain. This capability was facilitated by the Schnorr-Taproot upgrade, often simply called "Taproot," which occurred on BTC on November 14, 2021. It included two major elements: the Schnorr signature scheme and the Taproot contract programming method. These features were integrated as a soft fork within the standard P2TR scheme corresponding to SegWit's version 1.

The Schnorr scheme implemented is a derivation of the authentication protocol described in 1989 by Claus-Peter Schnorr. It is an alternative to ECDSA, based on the same elliptic curve (secp256k1), and allows transactions to be signed using the same key pairs.

Compared to ECDSA, the Schnorr signature scheme has several advantages. First, it produces smaller signatures. Second, the signatures produced are non-malleable, as the procedure doesn't involve random numbers. Third, and most importantly, it exhibits a property of linearity, enabling functionalities like batch verification and key aggregation.

The Schnorr scheme is superior to ECDSA and existed in 2008, but Satoshi Nakamoto chose not to use it. This choice can be explained by the algorithm being patented in the United States until February 2008, meaning there was no standardized implementation. Bitcoin's software used OpenSSL, which didn't include this type of algorithm.

The Schnorr scheme allows the deployment of *Scriptless Scripts*, contracts "without script" that are executed off-chain and applied within the signatures. The concept was theorized in 2017 by Andrew Poelstra[^539]. It is found in examples like the MuSig2 multiparty signature scheme, Adaptor Signatures, or Discreet Log Contracts.

Moreover, the Schnorr scheme greatly facilitates the implementation of Taproot (BIP-341), which was integrated into the protocol simultaneously. Taproot (literally meaning "taproot" in English) is a method for programming autonomous contracts that anchors the clauses of a contract within a Merkle tree and hides this tree under an aggregated public key belonging to its participants. It allows the contract to be published only in case of dispute and, even then, only the executed conditions are revealed. The scripts used in Taproot employ a programming language called Tapscript (BIP-342), based on Bitcoin's classic script language.

Taproot relies on a hash tree called a MAST[^540], whose leaves are the clauses of the contract—that is, the spending conditions. During MAST execution, the concerned participants need only reveal the applied clause and provide the hashes related to the other clauses (Merkle path), as shown in Figure [13.9](#fig:taproot-mast){reference-type="ref" reference="fig:taproot-mast"}. The other spending conditions are thus not revealed.

![MAST involving the clauses of a contract.](img/taproot-mast.png){#fig:taproot-mast}

The implementation of such MASTs within Bitcoin had been proposed in the past, either in the form of a new SegWit version (BIP-114) or a new opcode called `OP_MERKLEBRANCHVERIFY` (BIP-116, BIP-117). However, Taproot constituted a superior proposal by allowing the MAST's existence itself to remain hidden.

Indeed, Taproot includes an integrated cooperative spending condition. The internal aggregated public key is slightly modified (*tweaked*) using the MAST root to account for it. The resulting key is the one recorded in the coin's locking script, making it indistinguishable from other P2TR outputs. Similarly, the aggregated signature cannot be distinguished from a classic signature. Thus, participants can spend the funds amicably while ensuring that any dispute will lead to on-chain settlement.

An alternative to Taproot is RGB, a system of off-chain autonomous contracts built both on top of Bitcoin and Lightning. The name comes from the RGB standard (*Red Green Blue*), which is used to define a color, directly referencing colored coins, as RGB was originally conceived as "a better version of colored coins[^541]." However, while RGB indeed allows the issuance and management of tokens, this functionality is far from the only one.

RGB is based on two technical primitives conceptualized in 2016 by developer Peter Todd: client-side validation and single-use seals. This allows the management of an independent state where double-spending is prevented by these seals. After research by Giacomo Zucco and the BHB Network, RGB is currently developed by the LNP/BP Standards Association.

Implementing contracts off-chain is thus possible on Bitcoin, bringing two main benefits. First, it reduces fee payments by having a minimal on-chain footprint. Second, it improves the privacy of participants. This potential positions them to play a significant role in the long term.

## A Programmable Currency {#a-programmable-currency .unnumbered}

The programmable aspect of Bitcoin is often overlooked. It's not directly presented in the white paper, even though Satoshi Nakamoto had already developed it by then. However, it's very useful and constitutes one of Bitcoin's essential facets.

Currency programmability can be used for control, as illustrated by the CBDC projects emerging worldwide. But it can also greatly enhance individual freedom. This modular aspect allows people who don't know each other to exchange value in the most secure way possible or, as Tim May expressed in his *Crypto Anarchist Manifesto* of 1988, to "do business and negotiate contracts electronically with strangers, without ever knowing the True Name, or legal identity, of the other[^542]."

Autonomous contracts form the cornerstone of financial relations in cyberspace. Even the Monero community, which had particularly restricted this aspect for privacy reasons, retraced its steps by integrating multisignature functionality into the protocol, notably to allow atomic swaps. A truly free currency must be freely programmable.

[^515]: The term "contrat autonome" aiming to translate *smart contract* was proposed by Jacques Favier, Adli Takkal-Bataille, and Benoît Huguet in *Bitcoin: Métamorphoses* (pp. 105–107) in 2018.

[^516]: Nick Szabo, *Smart Contracts*, 1994, archived: <https://web.archive.org/web/20011102030833/http://szabo.best.vwh.net:80/smart.contracts.html>.

[^517]: Bitfinex's 3-of-5 multisignature address is bc1qgdjqv0av3q56jvd82tkdjpy7gdp9ut8tlqmgrpmv24sq90ecnvqqjwvw97.

[^518]: "Buyers could be easily protected by routine escrow mechanisms."—Satoshi Nakamoto, *Bitcoin: A Peer-to-Peer Electronic Cash System*, October 31, 2008.

[^519]: Sergio Demian Lerner, *P2PTradeX: P2P Trading between cryptocurrencies*, July 5, 2012, 23:49:48 UTC: <https://bitcointalk.org/index.php?topic=91843.msg1011737#msg1011737>; Gregory Maxwell, *Re: P2PTradeX: P2P Trading between cryptocurrencies*, July 6, 2012, 02:17:02 UTC: <https://bitcointalk.org/index.php?topic=91843.msg1011956#msg1011956>.

[^520]: To ensure the proper execution of the contract (avoid transaction replacement during confirmation wait), public keys are assigned to each of these conditions so that a signature is always required from the recipient of the funds.

[^521]: The contract addresses on LTC and DCR were (respectively) MLp49daA411aoZ1TmGEdyLuTCE9YA6xhpc and DccPF1yt9cV8vhr97fq3umBx7RqV53MYGDY. The exchange was 1.337 LTC for 2.4066 DCR.—*Decred-compatible cross-chain atomic swapping*, September 20, 2017: <https://github.com/decred/atomicswap/blob/master/README.md#first-mainnet-dcr-ltc-atomic-swap>.

[^522]: Joseph Poon and Thaddeus Dryja, *The Bitcoin Lightning Network DRAFT Version 0.5*, February 28, 2015: <https://lightning.network/lightning-network-paper-DRAFT-0.5.pdf>.

[^523]: Andreas M. Antonopoulos, Olaoluwa Osuntokun, René Pickhardt, "Payment Channels," in *Mastering the Lightning Network: A Second Layer Blockchain Protocol for Instant Bitcoin Payments*, O'Reilly Media, 2022, pp. 149–184.

[^524]: Christian Decker, Rusty Russell, Olaoluwa Osuntokun, *eltoo: A Simple Layer2 Protocol for Bitcoin*, April 30, 2018: <https://blockstream.com/eltoo.pdf>.

[^525]: Transaction c0b2cf75b47d1e7f48cdb4287109ff1dd5bcf146d5f77a9e8784c0c9c0ef02ad, confirmed on December 13, 2012, contains the string *TheCakeIsALie\\n* in reference to the video game *Portal*.

[^526]: Bitcoin Core, *Bitcoin Core version 0.9.0 released*, March 19, 2014: <https://bitcoin.org/en/release/v0.9.0#opreturn-and-data-in-the-block-chain>.

[^527]: Ken Shirriff, *Hidden surprises in the Bitcoin blockchain and how they are stored: Nelson Mandela, Wikileaks, photos, and Python software*, February 16, 2014: <https://www.righto.com/2014/02/ascii-bernanke-wikileaks-photographs.html>.

[^528]: Hal Finney, *Re: \[bitcoin-list\] Bitcoin v0.1.5 released*, February 27, 2009, 20:00:12 UTC, archived: <https://web.archive.org/web/20131016004925/http://sourceforge.net/p/bitcoin/mailman/bitcoin-list/?viewmonth=200902>.

[^529]: CoinGeek, *Jerry Chan: Bitcoin's value is as a universal source of truth*, July 17, 2019: <https://coingeek.com/jerry-chan-bitcoins-value-is-as-a-universal-source-of-truth-video/>.

[^530]: Yoni Assia, *bitcoin 2.X (aka Colored Bitcoin) -- initial specs*, March 27, 2012: <https://yoniassia.com/coloredbitcoin/>; Meni Rosenfeld, *Overview of Colored Coins*, December 4, 2012: <https://bitcoil.co.il/BitcoinX.pdf>.

[^531]: J.R. Willett, *The Second Bitcoin Whitepaper*, January 6, 2012, archived: <https://cryptochainuni.com/wp-content/uploads/Mastercoin-2nd-Bitcoin-Whitepaper.pdf>.

[^532]: All bitcoins sent to address 1EXoDusjGwvnjZUyKkxZ4UHEf77z6A5S4P were converted into MSC at a rate of 100 MSC at the beginning, decreasing over the weeks.

[^533]: All bitcoins sent to address 1CounterpartyXXXXXXXXXXXXXXXUWLpVr between January 2 and February 3, 2014, were converted into XCP at a rate that varied between 1,000 and 1,500 XCP per BTC.

[^534]: Hal Finney, *Crypto trading cards.*, January 17, 1993, 18:48:02 UTC: <https://cypherpunks.venona.com/date/1993/01/msg00152.html>.

[^535]: Jeff Garzik, *Resist the urge to use block chain for generalized storage*, December 7, 2010, 22:04:54 UTC: <https://bitcointalk.org/index.php?topic=2129.msg27884#msg27884>.

[^536]: BitMEX Research, *The OP_Return Wars of 2014—Dapps Vs Bitcoin Transactions*, July 12, 2022: <https://blog.bitmex.com/dapps-or-only-bitcoin-transactions-the-2014-debate/>.

[^537]: pourteaux, *Illegitimate bitcoin transactions*, January 25, 2023: <https://read.pourteaux.xyz/p/illegitimate-bitcoin-transactions>.

[^538]: Yoni Assia, Vitalik Buterin, Meni Rosenfeld, Rotem Lev, *Colored Coins whitepaper*, 2013: <http://www.ma.senac.br/wp-content/uploads/2018/05/ColoredCoinswhitepaper-DigitalAssets.pdf>; Vitalik Buterin, *A Prehistory of the Ethereum Protocol*, September 14, 2017: <https://vitalik.ca/general/2017/09/14/prehistory.html>.

[^539]: Andrew Poelstra, *Using the Chain for what Chains are Good For* (video), Scaling Bitcoin IV, November 5, 2017: <https://www.youtube.com/watch?v=3pd6xHjLbhs&t=5755s>; Aaron van Wirdum, "*Scriptless Scripts: How Bitcoin Can Support Smart Contracts Without Smart Contracts*", *Bitcoin Magazine*, November 27, 2017: <https://bitcoinmagazine.com/technical/scriptless-scripts-how-bitcoin-can-support-smart-contracts-without-smart-contracts>.

[^540]: The acronym MAST originally stands for *Merklized Abstract Syntax Trees*, referring to data structures described in BIP-114. In Taproot, these aren't truly abstract syntax trees, but the term remains used. The hash trees in Taproot can be called *Merklized Alternative Script Trees* by retroacronymy. See Anthony Towns, *\[bitcoin-dev\] Safer sighashes and more granular SIGHASH_NOINPUT*, November 23, 2018, 05:03:30 UTC: <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016500.html>.

[^541]: RGB FAQ, *What does 'RGB' stand for?*, December 14, 2020: <https://www.rgbfaq.com/faq/what-does-rgb-stand-for>.

[^542]: Timothy C. May, *The Crypto Anarchist Manifesto*, November 22, 1992, 20:11:24 UTC: <https://cypherpunks.venona.com/date/1992/11/msg00204.html>.
